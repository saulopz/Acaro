package program;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class KnowledgeBase {
    private String path;
    private int idxCategory;

    public KnowledgeBase(String path) {
	this.path = path;
	idxCategory = 0;
    }

    public void load() {
	deleteAll();
	File dir = new File(path);
	File files[] = dir.listFiles(new FilenameFilter() {
	    public boolean accept(File dir, String name) {
		return name.toLowerCase().endsWith(".kb");
	    }
	});
	System.out.println("Loading knowledge base in: " + path + " ("
		+ files.length + " files)");
	for (int i = 0; i < files.length; i++) {
	    loadFile(path + "/" + files[i].getName());
	}
    }

    public void loadFile(String fileName) {
	String topic = "";
	String category = "";
	String client = "";
	System.out.println("...File: " + fileName);
	try {
	    Connection con = DatabaseConnection.getConnection();
	    Statement stmt = con.createStatement();

	    FileReader fileReader = new FileReader(fileName);
	    BufferedReader reader = new BufferedReader(fileReader);
	    String line = null;
	    while ((line = reader.readLine()) != null) {
		String query = "";
		line = line.trim();
		if (!line.equals("")) {
		    System.out.println(". " + line);
		    char tag = line.charAt(0);
		    String txt = (line.substring(1)).trim();
		    switch (tag) {
		    case 'a':
			topic = txt;
			break;
		    case 'c':
			category = txt;
			if (category.equals("")) {
			    category = String.valueOf(idxCategory);
			    idxCategory++;
			}
			query = "insert into category (name, topic) values('"
				+ category + "', '" + topic + "')";
			break;
		    case 'w':
			if (!category.equals("")) {
			    query = "update category set that='" + txt
				    + "' where name='" + category + "'";
			}
			break;
		    case 's':
			if (!category.equals("")) {
			    query = "update category set goto='" + txt
				    + "' where name='" + category + "'";
			}
			break;
		    case 'l':
			if (!category.equals("")) {
			    query = "update category set link='" + txt
				    + "' where name='" + category + "'";
			}
			break;
		    case 'e':
			if (!category.equals("")) {
			    query = "update category set execute='" + txt
				    + "' where name='" + category + "'";
			}
			break;
		    case 'p':
			if (!category.equals("")) {
			    query = "insert into pattern (category, content) values ('"
				    + category + "', '" + txt + "')";
			}
			break;
		    case 't':
			if (!category.equals("")) {
			    query = "insert into template (category, content) values ('"
				    + category + "', '" + txt + "')";
			}
			break;
		    case 'i':
			if (!category.equals("")) {
			    int pos = txt.indexOf(":");
			    String conditional = txt.substring(0, pos);
			    String content = txt.substring(pos + 1);
			    query = "insert into template (category, conditional, content) values ('"
				    + category
				    + "', '"
				    + conditional
				    + "', '"
				    + content + "')";
			}
			break;
		    case 'f':
			query = "insert into scape (content) values ('" + txt
				+ "')";
			break;
		    case 'u':
			client = txt;
			query = "insert into client (email) values('" + txt
				+ "')";
			break;
		    case 'v':
			int pos = txt.indexOf("=");
			String name = txt.substring(0, pos - 1);
			name = name.trim();
			String value = txt.substring(pos + 1);
			value = value.trim();
			query = "insert into variable (client, name, value) values ('"
				+ client + "', '" + name + "','" + value + "')";
			break;
		    default:
			break;
		    }
		    if (!query.equals("")) {
			System.out.println(query);
			stmt.executeUpdate(query);
		    }
		}
	    }
	    fileReader.close();
	    reader.close();
	    stmt.close();
	} catch (SQLException e) {
	    e.printStackTrace();
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    private void saveBackup() {
	try {
	    String output = "# Backup of User Information"
		    + "# Please, do not edit this file.\n"
		    + "# It is created automatically.";
	    Connection con = DatabaseConnection.getConnection();
	    Statement stmt = con.createStatement();
	    String query = "select * from variable where client <> '' order by client";
	    ResultSet rs = stmt.executeQuery(query);
	    String currentClient = "";
	    while (rs.next()) {
		String client = rs.getString("client");
		if (!currentClient.equals(client)) {
		    currentClient = client;
		    output += "\n\nu " + client;
		}
		String name = rs.getString("name");
		String value = rs.getString("value");
		output += "\nv " + name + " = " + value;
	    }
	    stmt.close();
	    // Create a file to save backup
	    File file = new File(path + "/user_information.kb");
	    if (file.exists()) {
		file.delete();
	    }
	    file.createNewFile();
	    // write information
	    BufferedWriter bw = new BufferedWriter(new FileWriter(
		    file.getAbsoluteFile()));
	    bw.write(output);
	    bw.close();
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    public void deleteAll() {
	saveBackup();
	try {
	    Connection con = DatabaseConnection.getConnection();
	    Statement stmt = con.createStatement();
	    stmt.executeUpdate("delete from scape");
	    stmt.executeUpdate("delete from global");
	    stmt.executeUpdate("delete from template");
	    stmt.executeUpdate("delete from pattern");
	    stmt.executeUpdate("delete from category");
	    stmt.executeUpdate("delete from variable");
	    stmt.executeUpdate("delete from client");
	    stmt.close();
	} catch (SQLException e) {
	    e.printStackTrace();
	}
    }

    public void done() {
	saveBackup();
    }
}
